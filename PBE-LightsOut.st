SimpleSwitchMorph subclass: #LOCell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'PBE-LightsOut'!!LOCell methodsFor: 'initialization' stamp: 'FranzHoermann 5/14/2019 20:53'!initialize   super initialize.   self label: ''.   self borderWidth: 2.   bounds := 0@0 corner: 16@16.   offColor := Color paleYellow.   onColor := Color paleBlue darker.   self useSquareCorners.   self turnOff! !!LOCell methodsFor: 'accessing' stamp: 'FranzHoermann 5/14/2019 23:28'!mouseAction: aBlock   ^ mouseAction := aBlock! !!LOCell methodsFor: 'event handling' stamp: 'FranzHoermann 5/14/2019 23:29'!mouseUp: anEvent   mouseAction value! !!LOCell methodsFor: 'event handling' stamp: 'FranzHoermann 5/15/2019 08:19'!mouseMove: anEvent! !BorderedMorph subclass: #LOGame	instanceVariableNames: 'cells'	classVariableNames: ''	poolDictionaries: ''	category: 'PBE-LightsOut'!!LOGame methodsFor: 'accessing' stamp: 'FranzHoermann 5/14/2019 23:12'!cellsPerSide	"The number of cells along each side of the game"	^ 10! !!LOGame methodsFor: 'accessing' stamp: 'FranzHoermann 5/14/2019 23:27'!toggleNeighboursOfCellAt: i at: j   (i > 1) ifTrue: [ (cells at: i - 1 at: j ) toggleState].   (i < self cellsPerSide) ifTrue: [ (cells at: i + 1 at: j) toggleState].   (j > 1) ifTrue: [ (cells at: i  at: j - 1) toggleState].   (j < self cellsPerSide) ifTrue: [ (cells at: i at: j + 1) toggleState].! !!LOGame methodsFor: 'initialization' stamp: 'FranzHoermann 5/15/2019 08:15'!initialize   | sampleCell width height n |   super initialize.   n := self cellsPerSide.   sampleCell := LOCell new.   width := sampleCell width.   height := sampleCell height.   self bounds: (50@50 extent: ((width*n) @(height*n)) + (2 * self borderWidth)).   cells := Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].! !!LOGame methodsFor: 'instance creation' stamp: 'FranzHoermann 5/15/2019 08:11'!newCellAt: i at: j "Create a cell for position (i,j) and add it to my on-screen   representation at the appropriate screen position.  Answer the new cell"   | c origin |   c := LOCell new.   origin := self innerBounds origin.   self addMorph: c.   c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.   c mouseAction: [self toggleNeighboursOfCellAt: i at: j].	^ c ! !